#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <deque>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <climits>
#include <sys/time.h>

using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;

#define STORAGE 1000000
int _arr[STORAGE + 10];
int gen()
{
	static int IDDX = 0;
	if(IDDX == STORAGE) IDDX = 0;
	if(IDDX == 0) random_shuffle(_arr,_arr+STORAGE);
	return _arr[IDDX++];
}


int arr[1000010];
double MP[1000010];
double BAD[] = {
		499.422,
		499.478,
		499.336,
		499.294,
		498.643,
		498.809,
		498.799,
		498.785,
		498.163,
		498.166,
		497.924,
		498.029,
		497.925,
		497.549,
		497.568,
		497.751,
		497.518,
		497.027,
		497.15,
		496.901,
		496.954,
		497.136,
		497.365,
		496.667,
		496.653,
		496.724,
		496.267,
		496.12,
		495.924,
		495.882,
		495.604,
		495.587,
		495.721,
		495.521,
		495.237,
		495.164,
		495.221,
		495.132,
		495.254,
		494.771,
		494.526,
		494.548,
		494.337,
		494.348,
		494.45,
		494.477,
		493.87,
		494.064,
		493.734,
		493.355,
		493.446,
		493.275,
		493.344,
		493.435,
		493.209,
		493.069,
		492.949,
		492.888,
		492.988,
		492.246,
		492.73,
		492.817,
		492.338,
		492.132,
		491.949,
		491.789,
		492.263,
		491.675,
		491.585,
		491.534,
		491.368,
		491.406,
		490.96,
		491.281,
		491.258,
		491.064,
		490.651,
		490.359,
		490.375,
		490.503,
		490.567,
		490.146,
		490.265,
		489.983,
		489.949,
		490.061,
		489.819,
		489.86,
		490.165,
		489.225,
		489.702,
		489.619,
		489.242,
		489.527,
		489.395,
		488.96,
		488.993,
		488.719,
		488.745,
		488.813,
		488.588,
		488.649,
		488.168,
		488.314,
		488.18,
		488.578,
		488.872,
		488.235,
		488.044,
		487.98,
		487.895,
		487.964,
		487.696,
		488.051,
		487.681,
		487.424,
		487.388,
		487.507,
		486.855,
		487.231,
		486.899,
		486.904,
		486.842,
		486.714,
		487.148,
		486.845,
		486.679,
		486.653,
		486.481,
		486.508,
		486.497,
		486.224,
		486.135,
		485.915,
		485.938,
		486,
		485.972,
		485.436,
		485.962,
		485.436,
		485.71,
		485.54,
		485.827,
		485.475,
		485.721,
		485.035,
		485.435,
		485.354,
		485.582,
		484.743,
		485.116,
		484.835,
		485.217,
		484.714,
		484.576,
		484.512,
		484.751,
		484.666,
		484.432,
		484.444,
		484.731,
		483.912,
		484.206,
		484.037,
		484.459,
		484.401,
		484.199,
		483.776,
		484.236,
		483.877,
		483.636,
		483.534,
		483.67,
		483.982,
		483.605,
		484.011,
		483.674,
		483.407,
		483.242,
		483.364,
		483.74,
		482.918,
		483.052,
		483.157,
		483.37,
		482.805,
		483.069,
		483.318,
		483.393,
		483.413,
		482.788,
		482.901,
		482.801,
		482.243,
		482.398,
		482.606,
		482.416,
		482.45,
		482.246,
		482.264,
		482.682,
		482.527,
		482.433,
		482.502,
		482.169,
		482.94,
		482.385,
		482.467,
		481.772,
		482.136,
		482.107,
		481.984,
		482.027,
		481.998,
		482.286,
		481.971,
		481.903,
		481.584,
		482.124,
		481.771,
		481.844,
		481.578,
		481.439,
		481.564,
		481.515,
		481.352,
		481.478,
		481.789,
		481.18,
		481.16,
		481.37,
		481.27,
		481.422,
		481.166,
		481.299,
		481.516,
		480.76,
		481.151,
		481.257,
		481.128,
		481.018,
		480.735,
		480.927,
		481.462,
		481.298,
		480.879,
		480.91,
		480.887,
		481.118,
		481.046,
		480.849,
		480.687,
		480.544,
		480.736,
		481.11,
		480.37,
		481.067,
		480.822,
		480.754,
		480.953,
		480.521,
		480.525,
		480.79,
		480.688,
		480.855,
		480.262,
		480.708,
		480.677,
		480.204,
		480.409,
		480.586,
		480.661,
		480.453,
		480.371,
		480.574,
		479.953,
		480.513,
		480.459,
		480.17,
		480.66,
		480.498,
		480.197,
		480.318,
		480.419,
		480.226,
		480.201,
		480.35,
		480.353,
		480.32,
		480.277,
		480.265,
		480.516,
		480.265,
		480.454,
		480.508,
		480.201,
		480.343,
		480.354,
		480.162,
		480.018,
		480.378,
		480.146,
		480.141,
		480.243,
		480.334,
		480.646,
		480.579,
		480.274,
		480.547,
		480.392,
		480.195,
		479.749,
		480.05,
		480.485,
		480.673,
		480.482,
		480.251,
		480.211,
		480.354,
		480.284,
		480.44,
		479.984,
		480.156,
		480.424,
		480.203,
		479.701,
		480.257,
		480.148,
		480.418,
		480.37,
		480.072,
		480.587,
		480.107,
		480.375,
		480.667,
		480.454,
		480.398,
		480.31,
		480.433,
		480.676,
		480.306,
		480.706,
		480.311,
		480.479,
		480.283,
		480.473,
		480.933,
		480.772,
		480.644,
		480.537,
		480.894,
		480.305,
		480.308,
		480.652,
		480.618,
		480.802,
		480.524,
		480.56,
		480.511,
		480.662,
		480.463,
		480.901,
		481.027,
		480.699,
		480.796,
		480.504,
		481.241,
		481.051,
		480.947,
		481.562,
		480.747,
		480.99,
		480.947,
		480.909,
		481.367,
		481.387,
		481.208,
		480.928,
		480.681,
		481.035,
		481.217,
		481.537,
		481.371,
		481.365,
		481.636,
		481.178,
		481.419,
		481.381,
		481.487,
		481.145,
		481.248,
		481.472,
		481.617,
		481.541,
		481.454,
		481.967,
		481.615,
		481.934,
		481.566,
		481.531,
		481.568,
		481.885,
		481.594,
		482.08,
		481.895,
		481.985,
		482.476,
		481.951,
		481.386,
		481.949,
		482.28,
		482.252,
		482.358,
		482.281,
		482.691,
		482.184,
		482.357,
		482.393,
		482.349,
		482.336,
		482.659,
		482.516,
		482.645,
		483.144,
		483.298,
		482.653,
		482.562,
		483.352,
		482.764,
		482.687,
		482.83,
		482.882,
		483.003,
		482.957,
		483.294,
		482.854,
		483.177,
		483.268,
		482.776,
		483.342,
		483.538,
		483.177,
		483.279,
		483.59,
		483.618,
		483.507,
		483.638,
		483.885,
		483.396,
		483.718,
		484.218,
		484.094,
		484.18,
		484.176,
		484.245,
		484.378,
		483.945,
		484.285,
		484.293,
		484.853,
		484.131,
		484.854,
		484.568,
		484.321,
		484.69,
		484.751,
		484.741,
		485.127,
		484.693,
		484.662,
		484.91,
		484.749,
		485.071,
		485.428,
		485.229,
		484.924,
		485.306,
		485.325,
		485.231,
		485.438,
		485.714,
		485.376,
		485.44,
		485.856,
		485.842,
		485.692,
		485.749,
		485.642,
		485.999,
		486.024,
		486.07,
		486.265,
		486.104,
		486.223,
		486.041,
		486.458,
		486.421,
		486.438,
		486.378,
		486.273,
		486.572,
		486.331,
		487.15,
		487.082,
		486.844,
		487.001,
		487.064,
		487.107,
		487.066,
		487.595,
		487.376,
		487.246,
		487.716,
		487.662,
		487.792,
		487.186,
		487.849,
		488.227,
		487.977,
		487.977,
		488.073,
		488.156,
		487.943,
		488.613,
		488.701,
		488.088,
		488.391,
		488.335,
		488.673,
		488.607,
		488.839,
		488.856,
		488.715,
		488.863,
		489.112,
		489.334,
		489.426,
		489.581,
		489.298,
		489.68,
		489.893,
		489.947,
		489.894,
		489.799,
		489.765,
		490.269,
		490.34,
		490.246,
		490.346,
		490.557,
		490.135,
		490.47,
		490.566,
		490.938,
		490.683,
		490.88,
		491.003,
		491.36,
		491.268,
		490.9,
		491.243,
		490.759,
		491.104,
		491.349,
		491.324,
		491.392,
		491.447,
		491.571,
		491.875,
		491.65,
		491.94,
		491.845,
		492.181,
		492.242,
		492.3,
		492.37,
		491.939,
		492.779,
		492.538,
		492.787,
		492.718,
		492.985,
		492.827,
		493.004,
		492.85,
		493.487,
		493.446,
		493.196,
		493.577,
		493.714,
		493.805,
		493.6,
		493.918,
		493.907,
		494.034,
		493.923,
		494.499,
		494.34,
		494.491,
		494.551,
		494.846,
		494.411,
		494.86,
		494.91,
		494.868,
		495.162,
		495.14,
		495.21,
		495.147,
		495.554,
		495.546,
		495.625,
		495.685,
		495.722,
		496.153,
		496.123,
		496.122,
		496.245,
		495.903,
		496.194,
		496.897,
		497.095,
		496.799,
		496.544,
		496.882,
		496.763,
		497.092,
		497.416,
		497.327,
		497.236,
		497.443,
		497.516,
		497.512,
		497.623,
		497.817,
		497.717,
		498.279,
		498.511,
		498.397,
		498.64,
		498.384,
		498.648,
		498.752,
		499.273,
		499.24,
		499.122,
		499.586,
		499.327,
		499.265,
		499.466,
		499.813,
		499.448,
		499.554,
		499.989,
		500.197,
		500.318,
		499.916,
		500.506,
		500.819,
		500.676,
		500.875,
		500.891,
		500.778,
		501.178,
		500.956,
		501.153,
		501.438,
		501.665,
		501.475,
		501.725,
		501.927,
		501.774,
		501.498,
		502.288,
		502.37,
		502.683,
		502.588,
		502.194,
		502.905,
		502.818,
		503.063,
		503.042,
		503.301,
		503.545,
		503.369,
		503.689,
		503.636,
		503.853,
		504.22,
		503.999,
		504.245,
		504.1,
		504.324,
		504.548,
		504.902,
		504.983,
		504.734,
		504.856,
		504.957,
		504.736,
		505.233,
		505.57,
		505.755,
		506.046,
		506.45,
		505.808,
		506.111,
		506.211,
		506.255,
		506.326,
		506.576,
		506.936,
		506.943,
		506.796,
		507.048,
		506.747,
		507.637,
		507.267,
		507.904,
		507.442,
		507.68,
		507.829,
		508.025,
		508.007,
		508.321,
		508.422,
		508.414,
		508.409,
		509.239,
		509.228,
		509.201,
		509.446,
		509.396,
		509.354,
		509.61,
		509.66,
		510.23,
		509.803,
		510.248,
		509.911,
		509.991,
		510.422,
		510.847,
		510.542,
		510.709,
		511.055,
		511.28,
		511.11,
		511.423,
		511.772,
		511.882,
		511.636,
		511.71,
		512.242,
		512.62,
		512.197,
		512.347,
		512.497,
		512.445,
		513.287,
		512.902,
		512.763,
		513.227,
		513.286,
		513.6,
		513.434,
		513.436,
		514.245,
		514.272,
		514.564,
		514.182,
		514.434,
		514.699,
		514.575,
		514.878,
		514.83,
		514.842,
		515.417,
		514.988,
		515.654,
		515.732,
		515.683,
		516.067,
		515.932,
		516.164,
		516.351,
		516.408,
		516.661,
		516.919,
		516.902,
		516.973,
		517.493,
		517.002,
		517.708,
		517.729,
		518.104,
		517.992,
		518.29,
		518.228,
		518.323,
		518.705,
		518.773,
		518.776,
		519.009,
		519.084,
		519.341,
		519.532,
		519.383,
		519.7,
		519.351,
		519.695,
		520.319,
		520.438,
		520.62,
		520.425,
		521.085,
		520.667,
		520.858,
		520.991,
		521.137,
		521.457,
		521.687,
		522.146,
		521.952,
		521.843,
		521.847,
		522.196,
		522.499,
		522.883,
		522.982,
		522.711,
		523.201,
		523.257,
		523.339,
		523.116,
		524.009,
		524.105,
		523.963,
		523.849,
		524.373,
		524.065,
		524.656,
		525.015,
		525.144,
		525.42,
		525.095,
		525.091,
		525.17,
		525.839,
		525.823,
		525.919,
		525.885,
		526.341,
		526.176,
		526.778,
		526.774,
		526.837,
		527.059,
		527.369,
		527.28,
		527.332,
		527.52,
		527.979,
		528.093,
		528.188,
		528.434,
		528.876,
		529.05,
		529.343,
		528.939,
		529.273,
		529.269,
		529.601,
		529.657,
		529.655,
		530.06,
		530.299,
		530.083,
		530.313,
		530.39,
		530.48,
		531.005,
		530.999,
		531.248,
		531.351,
		531.617,
		531.643,
		531.625,
		532.137,
		531.828,
		532.112,
		532.943,
		532.814,
		532.633,
		533.037,
		533.28,
		533.4,
		533.385,
		533.788,
		533.334,
		533.731,
		534.178,
		534.44,
		534.336,
		534.463,
		534.822,
		534.883,
		535.137,
		535.227,
		535.536,
		535.491,
		536.28,
		536.096,
		536.152,
		536.794,
		536.564,
		536.75,
		536.638,
		536.787,
		537.276,
		537.317,
		537.752,
		537.653,
		537.672,
		538.016,
		538.004,
		538.287,
		538.213,
		538.559,
		539.171,
		539.054,
		539.393,
		539.755,
		539.782,
		539.352,
		539.572,
		539.769,
		540.319,
		540.321,
		540.431,
		540.923,
		541.137,
		541.017,
		541.314,
		541.171,
		541.618,
		542.048,
		542.209,
		541.858,
		542.35,
		542.192,
		542.531,
		543.062,
		543.004,
		543.038,
		543.361,
		543.177,
		543.624,
		544.071,
		543.987,
		544.214,
		544.777,
		544.427,
		544.301,
		545.189,
		544.772,
		545.2,
		545.24,
		545.664,
		545.726,
		545.725,
		545.818,
		546.203,
		546.671,
		546.886,
		546.882,
		547.3,
		547.521,
		547.464,
		547.517,
		547.733,
		547.813,
		548.058,
		548.058,
		548.17,
		549.229,
		548.987,
		548.653,
		549.425,
		549.571,
		549.751,
		550.124,
		550.086,
		550.342,
		550.064,
		550.282,
		550.697,
		551.049,
		551.209,
		551.247
};
int main() 
{
//	freopen("out.txt","r",stdin);
//	int AVG = 0;
//	for(int i = 0; i < 120; ++i)
//	{
//		string s;
//		cin >> s >> s >> s;
//		if(s == "GOOD")AVG++;
//		else 			AVG--;
//		cout << s << endl;
//	}
//	cout << AVG << endl;
//	return 0;
	freopen("C-small-attempt15.in","r",stdin);
	freopen("out.txt","w",stdout);
	int TC;
	cin >> TC;
	for(int tc = 1 ; tc<=TC ; ++tc)
	{
		int N;
		cin >> N;
		double _GOOD = 0 , _BAD = 0;
		for(int i = 0; i < N; ++i)
		{
			int n; cin >> n; n--;
			_GOOD += abs(499 - i);
			_BAD  += abs(BAD[n] - i);
		}
//		cout << _BAD << " " << _GOOD << endl;
		cout << "Case #" << tc << ": " << (_GOOD < _BAD ? "GOOD" : "BAD") << endl;
	}
	
	return 0;
	srand(349857);
	for(int i = 0; i < STORAGE; ++i)
		_arr[i] = i;
	for(int i = 0; i < STORAGE; ++i)
		MP[i] = 0;
	int N = 1000;
	int sample = 2000000;
	for(int i = 0; i < sample; ++i)
	{
		for(int i = 0; i < N; ++i)
			arr[i] = i;
		for(int i = 0; i < N; ++i)
		{
//			int p = gen() % (N - i); p = N-1-p;
			int p = gen() % N;
			swap(arr[i] , arr[p]);
		}
		for(int i = 0; i < N; ++i)
			MP[arr[i]] += i;
	}
	for(int i = 0; i < N; ++i)
		cout << MP[i] / sample<< ",\n";
	cout << endl;
	cout << 1.0 * clock() / CLOCKS_PER_SEC << endl;
}





/*
15
1 15
2 5
2 14
2 15
3 9
3 15
4 11
4 14
6 10
6 12
6 15
7 8
8 12
10 13


1 - 15

 */

