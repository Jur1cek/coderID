#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
#include <fstream>
#include <bitset>

using namespace std;

#define foreach(it, c) for (__typeof__((c).begin()) it=(c).begin(); it != (c).end(); ++it)
template <typename T> void print_container(ostream& os, const T& c) { const char* _s = " "; if (!c.empty()) { __typeof__(c.begin()) last = --c.end(); foreach (it, c) { os << *it; if (it != last) os << _s; } } }
template <typename T> ostream& operator<<(ostream& os, const vector<T>& c) { print_container(os, c); return os; }
template <typename T> ostream& operator<<(ostream& os, const set<T>& c) { print_container(os, c); return os; }
template <typename T> ostream& operator<<(ostream& os, const multiset<T>& c) { print_container(os, c); return os; }
template <typename T> ostream& operator<<(ostream& os, const deque<T>& c) { print_container(os, c); return os; }
template <typename T, typename U> ostream& operator<<(ostream& os, const map<T, U>& c) { print_container(os, c); return os; }
template <typename T, typename U> ostream& operator<<(ostream& os, const pair<T, U>& p) { os << "(" << p.first << ", " << p.second << ")"; return os; }

template <typename T> void print(T a, int n, const string& split = " ") { for (int i = 0; i < n; i++) { cout << a[i]; if (i + 1 != n) cout << split; } cout << endl; }
template <typename T> void print2d(T a, int w, int h, int width = -1, int br = 1) { for (int i = 0; i < h; ++i) { for (int j = 0; j < w; ++j) { if (width != -1) cout.width(width); cout << a[i][j] << ' '; } cout << endl; } while (br--) cout << endl; }
template <typename T> void input(T& a, int n) { for (int i = 0; i < n; ++i) cin >> a[i]; }
#define dump(v) (cerr << #v << ": " << v << endl)

#define rep(i, n) for (int i = 0; i < (int)(n); ++i)
#define all(a) (a).begin(), (a).end()
#define clr(a, x) memset(a, x, sizeof(a))
#define sz(a) ((int)(a).size())
#define mp(a, b) make_pair(a, b)
#define ten(n) ((long long)(1e##n))

template <typename T, typename U> void upmin(T& a, const U& b) { a = min<T>(a, b); }
template <typename T, typename U> void upmax(T& a, const U& b) { a = max<T>(a, b); }
template <typename T> void uniq(T& a) { sort(a.begin(), a.end()); a.erase(unique(a.begin(), a.end()), a.end()); }
template <class T> string to_s(const T& a) { ostringstream os; os << a; return os.str(); }
template <class T> T to_T(const string& s) { istringstream is(s); T res; is >> res; return res; }
void fast_io() { cin.tie(0); ios::sync_with_stdio(false); }
bool in_rect(int x, int y, int w, int h) { return 0 <= x && x < w && 0 <= y && y < h; }

typedef long long ll;
typedef pair<int, int> pint;

const int dx[] = { 0, 1, 0, -1 };
const int dy[] = { 1, 0, -1, 0 };


double aves[] = {498.63261,498.28887,499.2125,499.5045,499.82108,500.82606,498.27695,498.50481,497.42771,499.17424,498.1106,498.73132,497.53619,496.95575,497.21118,496.19599,498.86822,497.1432,495.91113,497.26995,495.52947,494.87933,497.51261,497.34563,496.56577,495.32564,495.07042,497.41593,497.25228,495.93826,495.06048,494.72785,494.01159,496.00545,495.31803,493.7782,493.82392,496.62326,494.21273,493.98367,494.9951,494.56616,494.32643,494.02276,493.53682,493.68044,494.31146,492.70764,493.79044,494.09877,492.67513,491.67963,495.04899,492.83321,494.65594,493.86838,494.72828,492.41875,490.94747,492.46032,493.55779,492.2145,491.47024,491.79031,491.50833,492.6524,492.70474,489.76585,492.50878,490.83949,490.21193,490.46328,490.61739,490.89015,490.99883,491.18066,490.34613,489.21719,490.64801,489.55117,489.57623,491.26452,490.41432,489.57557,489.71397,491.44062,489.68922,489.33954,490.78748,488.27825,488.69556,489.53758,489.86529,489.93517,490.16614,487.93043,490.08683,489.13851,488.35024,489.45795,490.26627,489.58513,489.93376,488.10412,486.20935,487.73335,488.9641,487.84977,487.50982,489.11006,487.6039,488.41708,487.60579,486.5878,487.36179,488.30052,488.50175,487.27393,488.14691,485.80686,487.13055,486.2472,485.29913,486.50145,485.26347,487.65075,485.47499,484.9988,486.16897,487.59857,485.31645,485.38807,488.18394,487.09274,486.67191,485.83083,486.90163,486.63156,486.20124,486.4563,485.32435,486.18226,486.55561,485.49306,484.88405,486.14325,485.7918,485.78187,486.26007,484.7179,485.17114,485.57857,485.82781,485.59482,485.41033,483.79751,484.58182,484.11218,485.51859,483.55918,485.13683,483.34322,483.70846,484.38289,482.91625,483.05278,483.97241,484.62865,483.89135,483.52172,483.99301,483.71464,483.97389,484.23768,484.90685,482.40519,484.19276,483.76369,483.21146,482.48046,484.11469,482.51142,483.95329,481.49655,482.84631,483.88365,481.86917,482.3227,481.81203,483.11151,483.46773,483.3629,481.86024,482.64426,481.65852,482.12263,481.60382,483.92339,482.25237,482.57568,481.05928,480.8362,483.43377,482.80682,481.90994,482.15668,481.52646,481.87284,482.97912,483.788,482.23114,483.46462,481.70638,481.71043,482.29339,481.87814,482.49283,482.37927,481.20665,483.41715,481.48265,480.19335,480.41293,480.88158,481.48985,482.51743,481.4325,480.43854,482.41615,481.24041,482.35341,480.42764,482.32727,480.58355,481.67037,481.24253,480.75563,482.27331,480.61601,480.31669,482.52249,482.22717,481.19958,480.61577,482.32019,480.56322,480.68534,481.55537,482.01436,480.2632,481.29474,481.21087,480.58498,480.10987,480.90557,480.31996,481.72945,480.07298,480.0213,480.96585,479.7808,480.10296,480.74711,480.67438,480.25249,481.29988,480.57812,480.32933,480.2004,478.36964,481.04358,480.63852,481.68248,480.19308,479.9382,481.87488,479.91488,479.60012,480.25816,479.95404,479.80488,477.77567,479.79993,480.17165,479.88252,480.55324,479.57708,480.28281,480.88135,481.03385,481.59202,479.65606,480.08219,479.41035,481.66537,480.84601,480.54488,478.93633,480.67621,481.05356,479.06777,479.81073,479.68861,480.59647,479.1125,479.92413,478.64172,479.24367,479.62595,479.32553,481.46455,480.84175,481.08001,480.98946,480.29458,480.24926,478.73222,480.76011,481.16432,479.04641,479.30869,480.56189,479.70935,480.61568,481.31861,479.90518,481.05028,479.39271,480.43553,481.35964,479.41812,480.69239,480.23475,479.98356,481.69117,481.39386,480.43995,480.48409,479.92464,480.39331,480.31968,479.05605,479.89236,480.25429,480.36182,481.33564,482.25702,479.70435,479.20742,481.24041,480.94266,479.16294,478.98993,480.69125,481.77452,480.69176,479.84894,480.50537,481.03413,479.25195,479.8792,480.52019,481.63126,481.66868,480.80856,483.76634,479.57474,480.03755,481.12268,480.64344,481.03812,481.24436,481.03016,481.36436,480.39256,480.7779,481.85448,482.44872,481.53976,483.13426,481.85187,480.03196,481.33389,481.49259,479.8574,481.44208,480.64178,482.33248,481.41331,480.65933,481.41587,481.09642,480.89588,481.47613,480.67722,482.00875,482.17243,484.09788,482.60759,480.90032,483.22071,480.26889,482.66153,480.73897,482.26563,481.77524,482.48815,483.36396,481.44212,482.97643,481.39744,481.44572,481.30576,483.13414,482.84486,482.44984,482.63501,481.53368,482.69283,482.69984,483.06767,482.44352,482.39616,481.9394,483.44672,483.91865,483.33355,481.78612,484.10267,481.47763,482.30506,482.8682,484.37923,483.15374,485.10818,483.42239,483.36427,484.84084,483.41751,482.79439,482.64657,484.18661,482.93647,482.98623,484.87236,483.10261,482.05234,484.21477,483.11179,483.8847,484.21848,483.0186,483.21065,484.26988,484.36422,483.40487,486.54525,484.12511,485.4456,483.64572,485.56681,483.61734,484.03832,484.80243,484.73785,485.69021,483.41445,484.77194,484.64298,484.53706,483.63061,485.6756,484.63642,484.09826,484.08092,483.78574,484.90909,486.42624,484.02103,484.87683,484.71458,485.08056,485.87855,484.68627,485.18251,486.92922,487.21401,486.28765,485.72438,486.76023,486.45598,487.31657,485.156,487.41948,486.18647,486.38257,485.46831,485.96698,487.15777,486.72758,485.69571,487.38494,487.91438,487.8151,487.65448,487.61261,486.88385,488.97492,487.0393,485.37195,486.66262,487.81868,487.99459,487.25732,488.36211,487.53351,486.74741,487.19965,489.03549,487.5438,487.82645,488.12067,486.39866,489.10418,487.36354,487.46308,488.93258,487.94169,489.06946,488.78942,489.3776,489.76198,488.20024,489.04323,487.99902,489.24139,489.67194,488.977,488.48867,489.17092,490.10278,490.34361,489.58596,488.31416,487.5231,489.90433,490.0982,491.72184,492.38216,489.80821,489.75373,490.32755,490.47587,490.29192,491.40599,490.0748,491.56923,491.28124,490.48767,489.0363,490.08147,489.77641,490.76128,490.54284,491.58321,491.40975,489.69391,491.87584,492.07493,491.41012,492.60195,491.84251,493.50217,492.17591,493.28207,492.05479,493.85466,494.0368,491.92533,492.73302,492.94513,492.25512,493.71768,493.61943,492.46279,493.40975,493.78812,494.30713,493.55053,493.10337,494.68461,493.89603,494.84255,495.12335,492.82355,494.41498,493.65375,495.98959,495.4426,494.54667,495.97493,494.65761,493.87445,494.06472,494.25985,496.53907,496.06618,495.10635,495.73581,496.07214,494.64436,495.35423,496.51371,496.96263,495.42418,496.12171,496.87582,495.11164,494.66657,495.42716,495.73652,496.88004,497.80658,498.11647,496.27823,496.65551,496.96815,497.24262,497.34186,496.95896,497.1109,497.6675,499.52487,498.88092,498.35249,498.2786,496.62879,497.65048,498.99284,499.07678,497.81951,500.24231,499.85628,498.05936,499.71133,497.74284,498.66935,499.39272,499.06383,499.04697,499.18889,502.0447,501.48554,500.7713,499.04265,500.45494,498.52784,501.13194,502.53651,501.31514,501.82565,500.82525,500.82131,500.88159,501.22176,501.82757,501.71688,501.56286,501.79011,501.08081,501.75024,502.04226,502.79077,502.6084,502.89885,501.8935,502.1815,502.47202,505.09498,502.91032,503.52317,503.46836,502.78804,503.65102,503.3476,503.17157,503.74845,504.61374,503.67709,504.09819,503.7837,506.09431,506.10832,504.7857,505.5649,503.57051,504.89646,503.44784,505.95082,504.48463,504.51162,504.35038,504.67281,505.80735,505.79379,505.88017,506.10405,507.49191,506.15179,506.15923,507.66356,507.43707,505.39525,505.29953,507.29739,507.26927,507.4283,509.13207,506.39297,507.30014,505.67002,508.4525,508.8083,509.67119,506.45065,509.12766,509.52469,506.97959,509.40506,508.70147,507.70919,508.49268,509.19064,510.70466,510.80341,509.72113,510.69536,510.84341,510.43786,510.09601,510.68908,509.48474,509.71038,512.31986,512.19964,510.12095,512.077,510.27529,512.15807,511.14889,512.24042,511.60623,512.63819,513.19247,511.30136,512.48027,511.68831,511.13178,512.49211,512.28746,513.45227,513.37853,512.80589,512.98627,514.11503,512.87955,511.8297,515.60572,515.06989,515.07575,514.41518,514.72011,514.19066,514.88842,515.04833,516.64959,516.75667,514.9874,515.43436,515.38798,515.8137,516.40205,515.65759,516.0333,515.06069,517.33595,515.69949,516.91109,515.55255,516.9987,518.07935,516.67315,516.35361,519.19082,517.12405,518.22668,518.92935,517.02895,518.38453,516.06374,517.8658,518.71356,519.05757,517.72643,518.44752,519.48392,518.50235,518.95436,519.26289,519.38379,521.02789,519.05004,521.01421,520.06441,520.68141,521.0209,520.18911,521.87994,522.09834,521.32035,522.32985,521.65681,521.76479,522.30493,522.01594,522.60971,521.74187,522.73417,522.75729,522.35184,522.03881,521.98405,523.29122,523.94111,523.22514,522.72308,522.42907,524.64454,524.07719,523.83993,523.68849,526.12768,524.79814,525.21493,526.86216,526.32303,525.31115,524.90432,528.21755,525.50256,526.21278,526.40021,527.95114,526.48606,526.39314,526.75324,527.36398,527.80916,526.61091,529.07408,526.20463,527.42229,527.41667,527.57991,528.77519,527.58966,528.09132,530.60667,528.99794,530.00527,528.34691,529.02357,531.13985,529.84866,530.64893,529.85329,529.34499,530.90718,530.83207,530.82988,530.34296,531.24353,530.08396,532.95649,530.28204,533.48537,531.63658,533.40884,532.01254,531.33332,532.37808,532.40069,532.50007,532.56997,534.02639,533.87127,532.58935,533.11531,533.63591,534.06872,532.41936,532.98022,535.288,536.06773,534.40116,536.22995,534.12213,534.55089,535.40625,536.06522,534.56534,536.08262,536.78489,535.60506,537.56835,538.11064,536.71968,536.64741,538.59291,537.27943,536.34,538.24775,537.73784,535.94453,538.10518,538.04303,538.59705,540.35427,539.62731,538.44472,539.08761,538.15545,539.64274,538.92706,539.30678,538.97437,539.74712,539.59129,541.0044,541.15448,543.67153,542.2393,542.71016,541.74108,541.53962,542.10429,542.77231,542.14901,542.3375,542.39782,543.42407,541.87874,543.33955,543.66185,542.73419,543.42306,543.53596,542.57273,542.47249,543.30583,543.37993,544.92972,543.66347,544.62774,545.6647,544.33632,544.4877,545.72471,546.34735,546.58911,545.34942,544.75984,546.63772,547.54911,546.85665,546.30022,548.69112,545.42253,546.97156,547.9789,546.71937,547.07529,546.96338,547.89993,546.03986,548.18322,548.30507,550.36176,548.57434,548.70067,550.92502,551.09871,549.65097,548.50101,550.50046,549.12191,552.43416,552.53466,550.19117,550.97829};




double sum_diffs(const vector<int>& a)
{
    double d = 0;
    rep(i, 1000)
        d += abs(a[i] - aves[i]);
    return d;
}
int main()
{
    int T;
    cin >> T;
    vector<pair<double, int>> v;
    rep(i, T)
    {
        int n;
        cin >> n;
        vector<int> a(n);
        input(a, n);
        v.push_back(make_pair(sum_diffs(a), i));
    }
    sort(all(v));

    vector<string> res(T, "GOOD");
    rep(i, v.size() / 2)
        res[v[i].second] = "BAD";

    rep(i, T)
        printf("Case #%d: %s\n", i + 1, res[i].c_str());
}

