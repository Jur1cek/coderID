

import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.Arrays;

public class CJA {
	public static void main(String args[]) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(new FileWriter(
				"F:/Development/Algorithm/output.txt"));
		StreamTokenizer st = new StreamTokenizer(bf);
		st.nextToken();
		int T = (int) st.nval;
		for (int i = 0; i < T; i++) {
			st.nextToken();
			int N = (int) st.nval;
			st.nextToken();
			int L = (int) st.nval;
			int[] in = new int[N];
			for (int j = 0; j < N; j++) {
				st.nextToken();
				in[j] = Integer.parseInt(Integer.toString((int) st.nval), 2);
			}
			int[] tar = new int[N];
			for (int j = 0; j < N; j++) {
				st.nextToken();
				tar[j] = Integer.parseInt(Integer.toString((int) st.nval), 2);

			}

			// for (int j = 0; j < N; j++) {
			// System.out.println(in[j] + " " + tar[j]);
			// }

			Arrays.sort(tar);
			

			boolean flag = true;
			int ans = -1;
			
		
				tt: for (long n = 1 << L; n < (1 << (L + 1)); n++) {
					int[] temp = Arrays.copyOf(in, in.length);
					
					int count=0;
					flag=true;
					 for (int l = 0; l < L; l++) {
						
						if ((n & 1 << l) == 1 << l) {
							count++;
							for (int j = 0; j < N; j++) {
								temp[j] ^= 1 << l;
							}
						}

					}
					
					Arrays.sort(temp);
					for (int k = 0; k < N; k++) {
						if (temp[k] != tar[k]) {
							flag = false;
							continue tt;
						}
					}
					if (flag) {
						ans = count;
						break tt;
					}


				}
			
			out.println("Case #" + (i + 1) + ": "
					+ (ans == -1 ? "NOT POSSIBLE" : ans));

		}

		out.close();
	}

}
